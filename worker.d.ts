export declare const workerCode = "\nconst vsSource = `#version 300 es\n    in vec4 a_position;\n    out vec2 v_tex_coord;\n\n    void main() {\n        gl_Position = a_position;\n        v_tex_coord = vec2(a_position.x * 0.5 + 0.5, a_position.y * -0.5 + 0.5);\n    }\n`;\n\nconst fsSource = `#version 300 es\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    #else\n    precision mediump float;\n    #endif\n\n    uniform sampler2D u_height_map;\n    in vec2 v_tex_coord;\n    out vec4 fragColor;\n\n    void main() {\n        vec4 color = texture(u_height_map, v_tex_coord);\n        vec3 rgb = color.rgb * 255.0;\n\n        // terrainRGB\u306B\u304A\u3051\u308B\u9AD8\u5EA60\u306E\u8272\n        vec4 zero_elevation_color = vec4(1.0, 134.0, 160.0, 255.0) / 255.0;\n\n        float rgb_value = dot(rgb, vec3(65536.0, 256.0, 1.0));\n        float height = mix(rgb_value, rgb_value - 16777216.0, step(8388608.0, rgb_value)) * 0.01;\n        height = (height + 10000.0) * 10.0;\n\n        // \u5730\u7406\u9662\u6A19\u9AD8\u30BF\u30A4\u30EB\u306E\u7121\u52B9\u5024\u307E\u305F\u306F\u5B8C\u5168\u306B\u900F\u660E\u306A\u30D4\u30AF\u30BB\u30EB\u306E\u5224\u5B9A\n        bool is_valid = (rgb.r != 128.0 || rgb.g != 0.0 || rgb.b != 0.0) && color.a != 0.0;\n\n        fragColor = mix(\n            zero_elevation_color,\n            vec4(\n                floor(height / 65536.0) / 255.0,\n                floor(mod(height / 256.0, 256.0)) / 255.0,\n                mod(height, 256.0) / 255.0,\n                1.0\n            ),\n            float(is_valid)\n        );\n    }\n`;\n\nlet gl = null;\nlet program = null;\nlet positionBuffer = null;\nlet heightMapLocation = null;\n\nconst initWebGL = (canvas) => {\n\tgl = canvas.getContext('webgl2');\n\tif (!gl) {\n\t\tthrow new Error('WebGL not supported');\n\t}\n\n\tconst loadShader = (\n\t\tgl,\n\t\ttype,\n\t\tsource,\n\t) => {\n\t\tconst shader = gl.createShader(type);\n\t\tif (!shader) {\n\t\t\tconsole.error('Unable to create shader');\n\t\t\treturn null;\n\t\t}\n\t\tgl.shaderSource(shader, source);\n\t\tgl.compileShader(shader);\n\n\t\tif (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n\t\t\tconsole.error(\n\t\t\t\t'An error occurred compiling the shaders: ' +\n\t\t\t\t\tgl.getShaderInfoLog(shader),\n\t\t\t);\n\t\t\tgl.deleteShader(shader);\n\t\t\treturn null;\n\t\t}\n\t\treturn shader;\n\t};\n\n\tconst vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\n\tconst fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\n\tif (!vertexShader || !fragmentShader) {\n\t\tthrow new Error('Failed to load shaders');\n\t}\n\n\tprogram = gl.createProgram();\n\tif (!program) {\n\t\tthrow new Error('Failed to create program');\n\t}\n\tgl.attachShader(program, vertexShader);\n\tgl.attachShader(program, fragmentShader);\n\tgl.linkProgram(program);\n\n\tif (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n\t\tconsole.error(\n\t\t\t'Unable to initialize the shader program: ' +\n\t\t\t\tgl.getProgramInfoLog(program),\n\t\t);\n\t\tthrow new Error('Failed to link program');\n\t}\n\n\tpositionBuffer = gl.createBuffer();\n\tgl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\tconst positions = new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]);\n\tgl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW);\n\tconst positionLocation = gl.getAttribLocation(program, 'a_position');\n\tgl.enableVertexAttribArray(positionLocation);\n\tgl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\n\n\theightMapLocation = gl.getUniformLocation(program, 'u_height_map');\n};\n\nconst canvas = new OffscreenCanvas(256, 256);\n\nself.onmessage = async (e) => {\n\tconst { url, image } = e.data;\n\n\ttry {\n\t\tif (!gl) {\n\t\t\tinitWebGL(canvas);\n\t\t}\n\n\t\tif (!gl || !program || !positionBuffer || !heightMapLocation) {\n\t\t\tthrow new Error('WebGL initialization failed');\n\t\t}\n\n\t\tconst heightMap = gl.createTexture();\n\t\tgl.activeTexture(gl.TEXTURE0);\n\t\tgl.bindTexture(gl.TEXTURE_2D, heightMap);\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\n\t\tgl.useProgram(program);\n\t\tgl.uniform1i(heightMapLocation, 0);\n\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\n\t\tconst blob = await canvas.convertToBlob();\n\t\tif (!blob) {\n\t\t\tthrow new Error('Failed to convert canvas to blob');\n\t\t}\n\t\tconst buffer = await blob.arrayBuffer();\n\t\tself.postMessage({ url, buffer });\n\t} catch (error) {\n\t\tif (error instanceof Error) {\n\t\t\tself.postMessage({ url, error: error.message });\n\t\t}\n\t}\n};\n";
//# sourceMappingURL=worker.d.ts.map